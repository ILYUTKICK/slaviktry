import streamlit as st
import pandas as pd
import plotly.express as px
import ast


st.set_page_config(layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    df = pd.read_json("final_ochka_dirty.json")
    df["solution_text"] = df["solution"].apply(lambda x: ast.literal_eval(x)["text"] if pd.notnull(x) else "")
    return df

df = load_data()

# üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
def infer_question_type(text):
    text = text.lower()
    if "—É—Å—Ç–∞–Ω–æ–≤–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ" in text:
        return "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"
    elif "—Ä–∞—Å–ø–æ–ª–æ–∂–∏" in text or "—É–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å" in text:
        return "—É–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    elif "–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ" in text or "–º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤" in text:
        return "–≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)"
    elif "–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω" in text or "–æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç" in text:
        return "–≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ (–æ–¥–∏–Ω)"
    elif "–≤–ø–∏—à–∏—Ç–µ" in text or "–æ—Ç–≤–µ—Ç" in text:
        return "–æ—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç"
    return "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

df["question_type"] = df["solution_text"].apply(infer_question_type)

# –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏
def define_provocative(row):
    if row["question_type"] == "–æ—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç":
        return 3
    elif row["question_type"] in ["—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è", "—É–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"]:
        return 2
    elif row["question_type"] in ["–≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ (–æ–¥–∏–Ω)", "–≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)"]:
        return 1
    return 1

df["provocativeness"] = df.apply(define_provocative, axis=1)

# üß© –£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
subject_map = {
    "inf": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫",
    # –î–æ–±–∞–≤—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥—Ä—É–≥–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
}
df["subject_full"] = df["subject"].map(subject_map).fillna(df["subject"])

# üéõÔ∏è –§–∏–ª—å—Ç—Ä—ã
subjects = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã", df["subject_full"].unique(), default=df["subject_full"].unique())
types = st.multiselect("–¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤", df["question_type"].unique(), default=df["question_type"].unique())
prov_range = st.slider("–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏", 1, 3, (1, 3))

filtered = df[
    df["subject_full"].isin(subjects) &
    df["question_type"].isin(types) &
    df["provocativeness"].between(prov_range[0], prov_range[1])
]

# üìä 1. –ö–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ –≤–∏–¥—É
st.subheader("üßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ —Ç–∏–ø—É")
fig1 = px.histogram(
    filtered,
    x="subject_full",
    color="question_type",
    barmode="group",
    labels={"subject_full": "–ü—Ä–µ–¥–º–µ—Ç", "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"}
)
st.plotly_chart(fig1, use_container_width=True)

# üìä 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É
st.subheader("üìâ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É –≤–æ–ø—Ä–æ—Å–æ–≤")
fig2 = px.histogram(
    filtered,
    x="provocativeness",
    color="question_type",
    barmode="stack",
    labels={"provocativeness": "–ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å"}
)
st.plotly_chart(fig2, use_container_width=True)

# üìä 3. –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å
st.subheader("üìê –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ —Ç–∏–ø—É")
mean_df = filtered.groupby(["subject_full", "question_type"])["provocativeness"].mean().reset_index()
fig3 = px.bar(
    mean_df,
    x="subject_full",
    y="provocativeness",
    color="question_type",
    barmode="group",
    labels={"provocativeness": "–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å"}
)
st.plotly_chart(fig3, use_container_width=True)
